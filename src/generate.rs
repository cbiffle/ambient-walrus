use std::collections::BTreeMap;

use anyhow::{anyhow, bail};

use crate::{sensor, config::Config, control};

pub async fn run() -> anyhow::Result<()> {
    let sensor = sensor::iio_sensors_proxy::try_generate().await
        .ok_or_else(|| anyhow!("no compatible sensor driver detected"))?;

    let mut controls = BTreeMap::new();

    controls.extend(control::linux_backlight::try_generate().await);

    if controls.is_empty() {
        bail!("can't find any compatible/accessible lights to control!");
    }

    let config = Config {
        sensor,
        controls,
    };
    let text = toml::to_string_pretty(&config)
        .expect("could not format canned config as TOML?!");
    println!("# Example config generated by `ambientwalrus generate`");
    println!("{text}");
    Ok(())
}


