use std::{collections::BTreeMap, io::Write, fs};

use anyhow::{anyhow, bail, Context};

use crate::{sensor, config::Config, control};

pub async fn run(overwrite: bool) -> anyhow::Result<()> {
    let sensor = sensor::iio_sensors_proxy::try_generate().await
        .ok_or_else(|| anyhow!("no compatible sensor driver detected"))?;

    let mut controls = BTreeMap::new();

    controls.extend(control::linux_backlight::try_generate().await);

    if controls.is_empty() {
        bail!("can't find any compatible/accessible lights to control!");
    }

    let config = Config {
        sensor,
        controls,
    };
    let text = toml::to_string_pretty(&config)
        .expect("could not format canned config as TOML?!");

    if overwrite {
        let bd = xdg::BaseDirectories::with_prefix("ambientwalrus")
            .context("can't find HOME and/or config directories")?;
        let path = bd.place_config_file("config.toml")
            .context("can't create ~/.config/ambientwalrus")?;
        let mut f = fs::File::create(&path)
            .with_context(|| format!("can't create {}", path.display()))?;
        writeln!(f, "# Example config generated by `ambientwalrus generate`")?;
        writeln!(f, "{text}")?;

        println!("Configuration written to {}", path.display());
    } else {
        println!("# Example config generated by `ambientwalrus generate`");
        println!("# (to write this to your config dir, add `--overwrite`)");
        println!("{text}");
    }
    Ok(())
}


